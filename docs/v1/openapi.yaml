openapi: "3.1.0"
info:
  version: "1.0.0-alpha.2"
  title: "Photoley API"
  description: Private RESTful API for Photoley app.
servers:
  - url: https://photoley-server.onrender.com/api/v1
    description: Render deployment of server
paths:
  /register:
    post:
      summary: Register a new user
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                username:
                  type: string
                sticker:
                  type: string
                profilePicture:
                  type: string
                  format: binary
        required: true
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        400:
          description: Bad request
        409:
          description: Username or email already exists
        500:
          description: Internal server error

  /login:
    post:
      summary: Log in an existing user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
        required: true
      responses:
        200:
          description: User logged in successfully
          headers:
            Authorization:
              description: Bearer token
              schema:
                type: string
                format: bearer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        400:
          description: Bad request
        401:
          description: Unauthorized
        500:
          description: Internal server error

  /validate:
    get:
      summary: Validate the access token
      security:
        - bearerAuth: []
        - cookieAuth: []
      responses:
        200:
          description: Token is valid
        401:
          description: Unauthorized
        500:
          description: Internal server error

  /image/{publicId}:
    get:
      summary: Get an image by its publicId
      parameters:
        - name: publicId
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
        - cookieAuth: []
      responses:
        200:
          description: Image retrieved successfully
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
            image/svg:
              schema:
                type: string
        401:
          description: Unauthorized
        404:
          description: Image not found
        500:
          description: Internal server error

  /feed:
    get:
      summary: Get a feed of photos
      parameters:
        - name: skip
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
      security:
        - bearerAuth: []
        - cookieAuth: []
      responses:
        200:
          description: Photos retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedResponse'
        400:
          description: Bad request
        401:
          description: Unauthorized
        500:
          description: Internal server error

  /photo:
    post:
      summary: Upload a new photo
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                photo:
                  type: string
                  format: binary
                location:
                  type: object
                  properties:
                    lon:
                      type: number
                      format: float
                    lat:
                      type: number
                      format: float
                taggedUsers:
                  type: array
                  items:
                    type: string
        required: true
      security:
        - bearerAuth: []
        - cookieAuth: []
      responses:
        201:
          description: Photo uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhotoUploadResponse'
        400:
          description: Bad request
        401:
          description: Unauthorized
        500:
          description: Internal server error

  /profile:
    get:
      summary: Get the user's profile
      security:
        - bearerAuth: []
        - cookieAuth: []
      responses:
        200:
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        401:
          description: Unauthorized
        500:
          description: Internal server error

    put:
      summary: Update the user's profile
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                username:
                  type: string
                sticker:
                  type: string
                profilePicture:
                  type: string
                  format: binary
        required: true
      security:
        - bearerAuth: []
        - cookieAuth: []
      responses:
        200:
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        400:
          description: Bad request
        401:
          description: Unauthorized
        404:
          description: User not found
        409:
          description: Username already exists
        500:
          description: Internal server error

  /tags:
    get:
      summary: Get tags for the authenticated user
      parameters:
        - name: skip
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
      security:
        - bearerAuth: []
        - cookieAuth: []
      responses:
        200:
          description: Tags retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagsResponse'
        400:
          description: Bad request
        401:
          description: Unauthorized
        500:
          description: Internal server error

  /heatmap:
    get:
      summary: Get heatmap data based on location
      parameters:
        - name: latitude
          in: query
          required: true
          schema:
            type: number
            format: float
        - name: longitude
          in: query
          required: true
          schema:
            type: number
            format: float
        - name: minDistance
          in: query
          schema:
            type: number
            format: float
        - name: maxDistance
          in: query
          schema:
            type: number
            format: float
      security:
        - bearerAuth: []
        - cookieAuth: []
      responses:
        200:
          description: Heatmap data retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HeatmapResponse'
        400:
          description: Bad request
        401:
          description: Unauthorized
        500:
          description: Internal server error

  /stickers:
    get:
      summary: Get available stickers
      responses:
        200:
          description: Stickers retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StickersResponse'
        500:
          description: Internal server error

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    cookieAuth:
      type: apiKey
      in: cookie
      name: refreshToken

  schemas:
    UserPublicProfile:
      type: object
      properties:
        username:
          type: string
        profilePicture:
          type: string
      required:
        - username
        - profilePicture

    UserProfileResponse:
      type: object
      properties:
        email:
          type: string
        username:
          type: string
        profilePicture:
          type: string
        sticker:
          type: string

    FeedResponse:
      type: object
      properties:
        photos:
          type: array
          items:
            type: object
            properties:
              publicId:
                type: string
              pictureTaker:
                $ref: '#/components/schemas/UserPublicProfile'
              taggedUsers:
                type: array
                items:
                  $ref: '#/components/schemas/UserPublicProfile'
        total:
          type: integer
        skip:
          type: integer
        limit:
          type: integer

    PhotoUploadResponse:
      type: object
      properties:
        publicId:
          type: string
        pictureTaker:
          type: string
        taggedUsers:
          type: array
          items:
            type: string

    TagsResponse:
      type: object
      properties:
        tags:
          type: array
          items:
            type: object
            properties:
              tagId:
                type: string
              creator:
                $ref: '#/components/schemas/UserPublicProfile'
        total:
          type: integer
        skip:
          type: integer
        limit:
          type: integer

    HeatmapResponse:
      type: object
      properties:
        heatmapData:
          type: object

    StickersResponse:
      type: object
      properties:
        stickers:
          type: array
          items:
            type: object
            properties:
              publicId:
                type: string
